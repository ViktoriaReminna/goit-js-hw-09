{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAEhCC,GADcH,EAAOE,cAAc,UACpBF,EAAOE,cAAc,wBACpCE,EAAcJ,EAAOE,cAAc,sBACnCG,EAAWL,EAAOE,cAAc,wBA8BtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAXPR,EAAOgB,iBAAiB,UA1BP,SAAAC,GACfA,EAAMC,iBAEN,IAAMC,EAAaC,OAAOjB,EAAakB,OAEjCC,EAAOF,OAAOhB,EAAYiB,OAE1BE,EAASH,OAAOf,EAASgB,OAC3BG,EAAQL,EACZ,IAAKM,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAG3BnB,EAFiBmB,EAEOD,GACrBE,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,EAAA9B,GAAS+B,OAAOC,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDwB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBoB,EAAA9B,GAAS+B,OAAOI,QACd,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDgB,GAASF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst createBtnEl = formEl.querySelector('button');\nconst firstDelayEl = formEl.querySelector('input[name=\"delay\"]');\nconst delayStepEl = formEl.querySelector('input[name=\"step\"]');\nconst amountEl = formEl.querySelector('input[name=\"amount\"]');\n\nconst onSubmit = event => {\n  event.preventDefault();\n\n  const firstDelay = Number(firstDelayEl.value);\n\n  const step = Number(delayStepEl.value);\n\n  const amount = Number(amountEl.value);\n  let delay = firstDelay;\n  for (i = 0; i < amount; i++) {\n    const position = i;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n};\nformEl.addEventListener('submit', onSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$firstDelayEl","$ce04d3a99e08e73b$var$delayStepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","firstDelay","Number","value","step","amount","delay1","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.774973bb.js.map"}